{
  "hash": "5a8f4ae7753328c4b81c2446a923b192",
  "result": {
    "markdown": "\n::: {.content-visible when-format=\"html\"}\n::: {.cell}\n\\newcommand{\\prob}{\\mathbf P}\n\\newcommand{\\lt}{<}\n\\newcommand{\\mt}{>}\n:::\n\n```{=html}\n<style>\ndiv.correction {\n  color: black;\n  background-color: #F0F0F0;\n  font-style: normal;\n  /*display: none;*/\n}\n\n.corR {\n  font-style: italic;\n  /*display: none;*/\n}\n</style>\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\solntrue\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n# Introduction {#sec-intro}\n\n**R** est un logiciel libre et gratuit principalement dédié aux analyses statistiques et aux représentations graphiques. Il est gratuit et librement distribué par le **CRAN** (Comprehensive R Archive Network) à l'adresse suivante : <https://www.r-project.org>.\n\nL'installation varie d'un système d'exploitation à l'autre (Windows, Mac OS, Linux) mais elle est relativement simple, il suffit de suivre les instructions.\n\n**RStudio** est une interface facilitant l'utilisation de **R**. Elle est également gratuite et librement distribuée à l'adresse <https://www.rstudio.com>.\n\nL'interface **RStudio** est divisée en 4 fenêtres :\n\n-   *Console* où on peut entrer et exécuter des commandes (taper 1+2)\n-   *Environnement, History* où on peut visualiser les objets construits (taper a \\<- 1+2 dans la console)\n-   *Files, Plots...* où on peut visualiser les répertoires et fichiers de l'espace de travail, les graphiques, intaller des packages...\n-   *R script* où on conserve les lignes de commandes ainsi que les commentaires sur le travail effectué. Il faut penser à sauvegarder régulièrement ce fichier.\n\n## R Script\n\nIl existe différentes façons de travailler sur RStudio. De façon classique, on peut\n\n-   ouvrir un **script**.\n-   entrer les commandes dans le script.\n-   regarder les sorties dans la console (en cliquant sur le bouton **run**).\n-   sauver le script.\n\n## Packages\n\nUn package est une ensemble de programmes et fonctions **R** qui complètent les fonctions existantes par défaut dans le logiciel. Un package est généralement dédié à une méthode ou un champ d'application spécifique. Il existe plus de 18 000 packages disponibles sur le **CRAN** <https://cran.r-project.org>. On installe un package en\n\n-   utilisant le fonction **install.packages** dans la console. ou\n-   ou cliquant sur le bouton **Packages**.\n\nUne fois le package installé sur la machine, on l'installe avec la fonction **library** :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(package.name)\nlibrary(packages.name)\n```\n:::\n\n\n::: {#exr-exo-intro-package name=\"Installation et chargement\"}\n\\\n\n1.  Exécuter\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    iris |> summarize(mean_Petal=mean(Petal.Length))\n    ```\n    :::\n\n\n    Que se passe t-il ?\n\n    ::: {.corR data-latex=\"\"}\n    On a un message d'erreur. L'opérateur `|>` n'est pas reconnu.\n    :::\n\n2.  Installer et charger le package **tidyverse** et ré-exécuter le code précédent.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install.packages(\"tidyverse\")\n    ```\n    :::\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    library(tidyverse)\n    iris |> summarize(mean_Petal=mean(Petal.Length))\n    ##   mean_Petal\n    ## 1      3.758\n    ```\n    :::\n\n:::\n\n## Quarto\n\n**Quarto** est un langage, compatible avec notamment **R** et **Python**, qui permet de créer différents types de documents :\n\n-   rapports au format **pdf** ou **rtf**\n-   pages web **html**\n-   diaporama pour des présentations (**html**, **beamer**, **PowerPoint**...)\n-   applications web interactives\n-   ...\n\nqui comportent du code **R**.\n\n### Syntaxe\n\nLa syntaxe s'apprend assez facilement (il faut pratiquer), on pourra trouver un descriptif synthétique sur la page <https://quarto.org> ainsi que dans la [**cheatsheet**](https://rmarkdown.rstudio.com/lesson-15.HTML) dédiée à **Rmarkdown** puisque quarto est compatible avec markdown. Par exemple :\n\n-   Caractère en italique ou gras : `*italique*` et `**gras**` donne *italique* et **gras**\n\n-   Listes non ordonnées\n\n    ``` markdown\n    - item 1\n    - item 2\n    ```\n\n    produit\n\n    -   item 1\n    -   item 2\n\n-   liste ordonnée :\n\n    ``` markdown\n    1. item 1\n    2. item 2\n    ```\n\n    produit\n\n    1.  item 1\n    2.  item 2\n\n-   tableau :\n\n    ``` markdown\n    |      | Col1 | Col2 | Col3 |\n    |:----:|:----:|:----:|:----:|\n    | Row1 |  1   |   2  |   3  |\n    | Row2 |  1   |   2  |   3  |\n    ```\n\n    renvoie\n\n|      | Col1 | Col2 | Col3 |\n|:----:|:----:|:----:|:----:|\n| Row1 |  1   |  2   |  3   |\n| Row2 |  1   |  2   |  3   |\n\n-   équation latex :\n\n    ``` markdown\n    $$\\int_a^b f(x)dx=1$$\n    ```\n\n    renvoie $$\\int_a^b f(x)dx=1$$\n\n### Les chunks\n\nLe **code R** doit être écrit dans des **chunks**. On peut insérer des chunks avec :\n\n-   la raccourci clavier **Ctrl + Alt + I** (OS X: Cmd + Option + I)\n-   la bouton **Insert -\\> Code Chunk -\\> R**\n-   en tapant :\n\n```` markdown\n```{r}\ncommandes...\n```\n````\n\nPlusieurs options peuvent être spécifiés au chunk en fonction de ce que l'on souhaite voir dans le document, par exemple :\n\n-   **echo** : `TRUE`or `FALSE` pour spécifier si on souhaite afficher le code ;\n-   **eval** : `TRUE`or `FALSE` pour spécifier si le code doit être évalusé ou non ;\n-   **results** : `hide` si on ne veut pas voir la sortie du code.\n\nOn pourra trouver l'ensemble des options disponibles sur cette page : <https://yihui.org/knitr/options/>\n\n::: {#exr-exo-intro-markdown name=\"Premier document\"}\n\\\n\n1.  Ouvrir un document quarto (*File -\\> New File -\\> Quarto Document*).\n\n2.  Cliquer sur le bouton `Render` et visualiser la sortie **html**.\n\n3.  Obtenir une sortie **pdf**.\n\n4.  Modifier le document en créant une section **Cosinus** dans laquelle on tracera la fonction `cosinus`, on pourra utiliser le code suivant dans un **chunk**.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- seq(-2*pi,2*pi,by=0.01)\n    y <- cos(x)\n    plot(x,y,type=\"l\")\n    ```\n    :::\n\n\n5.  Ajouter une section **Sinus** dans laquelle on tracera la fonction `sinus`.\n:::\n\n### Notebook\n\nL'environnement **notebook** fonctionne exactement comme un document **markdown** mais permet de visualiser la sortie eu format **html** sans avoir à recompiler le document en entier. Cet environnement est donc souvent privilégié pendant la réalisation d'un projet en science des données. Pour créer un notebook, on peut passer par **RStudio** : *File -\\> New File -\\> R Notebook* ou simplement remplacer\n\n``` markdown\noutput: html_document\n```\n\npar\n\n``` markdown\noutput: html_notebook\n```\n\ndans l'entête d'un document **markdown**.\n\n::: {#exo-intro-notebook .exercise name=\"Premier document\"}\nTransformer le document markdown de l'exercice précédent en **notebook**. On pourra visualier la sortie en cliquant sur **Preview**.\n:::\n\n### Diaporama R\n\n**Rstudio** propose aussi différents environnements pour construire des **diaporamas**. On pourra utiliser le menu *File -\\> New File -\\> Quarto Presentation* . On utilisera la même syntaxe que pour les documents markdown. Les slides sont séparés par le symbole `##` et les codes R sont toujours insérés dans des chunks.\n\n::: {#exr-exo-intro-diaporama name=\"Premier document\"}\n1.  Créer 2 diapositives :\n    -   Titre : **Cosinus** où on tracera la fonction cosinus.\n    -   Titre : **Sinus** où on tracera la fonction sinus.\n2.  En modifiant les options des chunks modifier les diapositives de manière à\n    -   ne pas voir le code R mais voir les graphiques\n    -   voir uniquement le code R mais pas les graphiques.\n:::\n\n### Exemples de styles de documents Quarto\n\nPar défaut l'entête d'un document **quarto** est de la forme\n\n``` markdown\n---\ntitle: \"Mon document\"\nauthor: \"Laurent\"\nformat: html\neditor: visual\n---\n```\n\nIl existe un grand nombre d'options qui permettent d'améliorer le document final. On peut par exemple changer la langue et ajouter une table des matières avec\n\n``` markdown\nlang: fr\ntoc: true\n```\n\nOn peut également utiliser des styles prédéfinis en changeant le thème, par exemple\n\n``` markdown\ntheme: cerulean\n```\n\n![](img/cerulean_quarto.png){fig-align=\"center\"}\n\nOn pourra trouver des compléments sur les différents styles et options ici : <https://quarto.org/docs/output-formats/html-themes.html#navigation>.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}