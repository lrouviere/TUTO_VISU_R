{
  "hash": "d6f24b907f860672406402609d0237fd",
  "result": {
    "markdown": "\n::: {.content-visible when-format=\"html\"}\n::: {.cell}\n\\newcommand{\\prob}{\\mathbf P}\n\\newcommand{\\lt}{<}\n\\newcommand{\\mt}{>}\n:::\n\n```{=html}\n<style>\ndiv.correction {\n  color: black;\n  background-color: #F0F0F0;\n  font-style: normal;\n  /*display: none;*/\n}\n\n.corR {\n  font-style: italic;\n  /*display: none;*/\n}\n</style>\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\solntrue\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n# Programmer {#sec-programm}\n\nLa programmation en **R** est basée sur les mêms principes que pour les autres logiciels de calcul scientifique. On y retrouve les tructures classiques de la programmation (boucles, condition `if` `else`...) et des fonctions prédéfinies pripres à la statistique classique.\n\n## Structures de contrôle\n\nOn énumère les principales structures :\n\n-   `Boucles for` :\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    for (i in vecteur){\n      expr1\n      expr2\n      ...\n    }\n    ```\n    :::\n\n\n\n    Par exemple\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    for (i in 1:3){print(i)}\n    ## [1] 1\n    ## [1] 2\n    ## [1] 3\n    for (i in c(\"lundi\",\"mardi\",\"mercredi\")){print(i)}\n    ## [1] \"lundi\"\n    ## [1] \"mardi\"\n    ## [1] \"mercredi\"\n    ```\n    :::\n\n\n\n-   `Condition while`\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    while (condition) {expression}\n    ```\n    :::\n\n\n\n    Par exemple :\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    i <- 1\n    while (i<=3) {\n      print(i)\n      i <- i+1\n    }\n    ## [1] 1\n    ## [1] 2\n    ## [1] 3\n    ```\n    :::\n\n\n\n-   `Condition if else`\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    if (condition){\n      expr1\n      ...\n    } else {\n      expre2\n      ...\n    }\n    ```\n    :::\n\n\n\n    Par exemple :\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    a <- -2\n    if (a>0){\n      a <- a+1\n    } else {\n      a <- a-1\n    }\n    print(a)\n    ## [1] -3\n    ```\n    :::\n\n\n\n-   `switch`\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    switch(expression,\n           \"cond1\" = action1,\n           \"cond2\" = action2,\n           ...)\n    ```\n    :::\n\n\n\n    Par exemple :\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    X <- matrix(0,nrow = 5,ncol = 5)\n    switch(class(X)[1],\n           \"matrix\"=print(\"X est une matrice\"),\n           \"data.frame\"=print(\"X est un data.frame\"),\n           \"numeric\"=print(\"X est de classe numérique\"))\n    ## [1] \"X est une matrice\"\n    ```\n    :::\n\n\n\n\n## Écrire une fonction\n\nOn peut définir sa propre fonction dans un objet avec `function` :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmafonct <- function(param1,param2,...){\n  expr1\n  expr2\n  return(...)\n  }\n```\n:::\n\n\n\nConstruisons par exemple la fonction `factorielle` qui calcule la factorielle d'un entier `n` :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactorielle <- function(n){\n  return(prod(1:n))\n  }\n```\n:::\n\n\n\nOn peut la tester \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactorielle(5)\n## [1] 120\n```\n:::\n\n\n\nOn propose d'améliorer cette fonction en spécifiant des messages d'erreur ou d'alerte :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactorielle <- function(n){\n  if (n<=0) stop(\"l'entier doit être strictement positif\")\n  if (ceiling(n)!=n) warning(paste(\"arrondi de\",n,\"en\",ceiling(n)))\n  return(prod(1:ceiling(n)))\n  }\n```\n:::\n\n\n\nOn a alors un message d'erreur lorsque le paramètre est négatif\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactorielle(-2)\n## Error in factorielle(-2): l'entier doit être strictement positif\n```\n:::\n\n\n\nou un avertissement si ce n'est pas un entier \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactorielle(2.8)\n## Warning in factorielle(2.8): arrondi de 2.8 en 3\n## [1] 6\n```\n:::\n\n\n\n## Les fonctions map\n\nCes fonctions appartiennent au package `purrr` du `tidyverse`. Elles permettent d'appliquer des fonctions à des **listes** et donc à des `tibbles`. On peut les voir comme des versions améliorées des fonctions `apply`. On peut par exemple retrouver les sorties de\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(iris[,-5],2,mean)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##     5.843333     3.057333     3.758000     1.199333\n```\n:::\n\n\n\navec\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(iris[,-5],mean)\n## $Sepal.Length\n## [1] 5.843333\n## \n## $Sepal.Width\n## [1] 3.057333\n## \n## $Petal.Length\n## [1] 3.758\n## \n## $Petal.Width\n## [1] 1.199333\n```\n:::\n\n\nou encore \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dbl(iris[,-5],mean)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##     5.843333     3.057333     3.758000     1.199333\n```\n:::\n\n\nqui renvoie un vecteur de classe `numeric` plutôt qu'une liste. On peut citer également les fonctions `map_lgl`, `map_chr`, `map_dbl` qui retournent des vecteurs de logiques, de caractères ou d'entiers. \n\nDans le même style, on dispose des fonctions `map2_...` pour appliquer des fonctions à des **paires** d'éléments de **listes**. On peut par exemple sommer les élément de deux listes avec\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1 <- list(1,2,3)\nl2 <- list(4,5,6)\nmap2(l1,l2,`+`)\n## [[1]]\n## [1] 5\n## \n## [[2]]\n## [1] 7\n## \n## [[3]]\n## [1] 9\n#ou pour obtenir un vecteur\nmap2_dbl(l1,l2,`+`)\n## [1] 5 7 9\n```\n:::\n\n\n\nIl est également possible de spécifier explicitement sa propre fonction lorsqu'elle n'existe pas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ntbl1 <- tibble(age=runif(5,20,50),taille=runif(5,150,180))\ntbl2 <- tibble(age=runif(5,20,50),taille=runif(5,150,180))\nmap2_dbl(tbl1,tbl2,function(d1,d2) mean(rbind(d1,d2)))\n##       age    taille \n##  38.21492 164.83358\n```\n:::\n\n\n\nLa syntaxe peut paraître un peu lourde, avec notamment l'utilisation de `function`. On utilise régulièrement des **fonctions anonymes** qui peuvent se définir à l'aide d'une formule :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap2_dbl(tbl1,tbl2,~mean(rbind(.x,.y)))\n##       age    taille \n##  38.21492 164.83358\n```\n:::\n\n\nou en spécifiant explicitement les arguments\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap2_dbl(tbl1,tbl2,\\(d1,d2) mean(rbind(d1,d2)))\n##       age    taille \n##  38.21492 164.83358\n```\n:::\n\n\n\nNotons enfin que l'utilisation des fonctions anonymes diffèrent lorsqu'on chaîne les opérations avec le pipe de la distribution de **R** de base `|>` ou avec celui de **dplyr** `%>%` :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nX1 <- rnorm(100)\nc(0.25,0.5,0.75) %>% quantile(X1,probs = .)\n##         25%         50%         75% \n## -0.49385424  0.06175631  0.69181917\nc(0.25,0.5,0.75) |> quantile(X1,probs = .)\n## Error in if (na.rm) x <- x[!is.na(x)] else if (anyNA(x)) stop(\"missing values and NaN's not allowed if 'na.rm' is FALSE\"): the condition has length > 1\n```\n:::\n\n\n\nLe `.` permet d'indiquer la place de la quantité à gauche du pipe `%>%`. Lorsqu'on utilise `|>`, il faut utiliser une fonction anonyme :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(0.25,0.5,0.75) |> (\\(p) quantile(X1,probs = p))()\n##         25%         50%         75% \n## -0.49385424  0.06175631  0.69181917\n```\n:::\n\n\n\n## Exercices\n\n::: {#exr-program-iris name=\"Calculs d'indicateurs\"}\n\n1.  Écrire une fonction qui admet en entrée un entier positif `n` et qui renvoie la somme des entiers qui vont de 1 à `n`.\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    masomme <- function(n){\n      sum(1:n)\n    }\n    masomme(5)\n    ## [1] 15\n    ```\n    :::\n\n\n\n2.  Écrire une fonction qui remplace les données manquantes d'un jeu de données par la moyenne ou la médiane de la variable. Choisir la moyenne ou la médiane doit être un paramètre de la fonction. On pourra tester la fonction sur le `tibble` suivant :\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    set.seed(123)\n    tbl <- tibble(X1=as.numeric(sample(10,5)),X2=as.numeric(sample(10,5)))\n    tbl[3,1] <- NA;tbl[4,2] <- NA\n    tbl\n    ## # A tibble: 5 x 2\n    ##      X1    X2\n    ##   <dbl> <dbl>\n    ## 1     3     5\n    ## 2    10     4\n    ## 3    NA     6\n    ## 4     8    NA\n    ## 5     6     1\n    ```\n    :::\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    imputation <- function(tbl,choix=\"moyenne\"){\n      if (choix==\"moyenne\"){\n        moy <- map_dbl(tbl,\\(x) mean(x,na.rm = TRUE)) |> as.numeric()\n        for (i in 1:ncol(tbl)){\n          tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])\n          }\n        } else {\n          med <- map_dbl(tbl,\\(x) median(x,na.rm = TRUE)) |> as.numeric()\n          for (i in 1:ncol(tbl)){\n            tbl[is.na(tbl[,i]),i] <- med[i]\n          }\n        }\n      return(tbl)\n    }\n    imputation(tbl)\n    ## # A tibble: 5 x 2\n    ##      X1    X2\n    ##   <dbl> <dbl>\n    ## 1  3        5\n    ## 2 10        4\n    ## 3  6.75     6\n    ## 4  8        4\n    ## 5  6        1\n    imputation(tbl,choix=\"mediane\")\n    ## # A tibble: 5 x 2\n    ##      X1    X2\n    ##   <dbl> <dbl>\n    ## 1     3   5  \n    ## 2    10   4  \n    ## 3     7   6  \n    ## 4     8   4.5\n    ## 5     6   1\n    ```\n    :::\n\n\n\n\n:::\n\n::: {#exr-program-iris name=\"Calculs d'indicateurs\"}\n\n1.  Écrire une fonction qui calcule la moyenne et la variance des colonnes d'un jeu de données qui ne contient que des variables continues. On utilisera une boucle `for` et on testera la fonction sur les 4 premières colonnes des données `iris`.\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    moy_var <- function(tbl){\n      p <- ncol(tbl)\n      moyenne <- rep(0,p)\n      variance <- rep(0,p)\n      for (i in 1:ncol(tbl)){\n        moyenne[i] <- mean(tbl[,i])\n        variance[i] <- var(tbl[,i])\n      }\n      return(list(moy=moyenne,var=variance))\n    }\n    moy_var(iris[,1:4])\n    ## $moy\n    ## [1] 5.843333 3.057333 3.758000 1.199333\n    ## \n    ## $var\n    ## [1] 0.6856935 0.1899794 3.1162779 0.5810063\n    ```\n    :::\n\n\n\n\n2.  Même question en utilisant la fonction `apply`.\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    moy_var <- function(tbl){\n      moyenne <- apply(tbl,2,mean)\n      variance <- apply(tbl,2,var)\n      return(list(moy=moyenne,var=variance))\n    }\n    moy_var(iris[,1:4])\n    ## $moy\n    ## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n    ##     5.843333     3.057333     3.758000     1.199333 \n    ## \n    ## $var\n    ## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n    ##    0.6856935    0.1899794    3.1162779    0.5810063\n    ```\n    :::\n\n\n\n3.  Même question en utilisant une fonction `map_...`.\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    moy_var <- function(tbl){\n      moyenne <- map_dbl(tbl,mean)\n      variance <- map_dbl(tbl,var)\n      return(list(moy=moyenne,var=variance))\n    }\n    moy_var(iris[,1:4])\n    ## $moy\n    ## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n    ##     5.843333     3.057333     3.758000     1.199333 \n    ## \n    ## $var\n    ## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n    ##    0.6856935    0.1899794    3.1162779    0.5810063\n    ```\n    :::\n\n\n\n    :::{.corR data-latex=\"\"}\n    ou encore\n    :::\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    moy_var <- function(tbl){\n      map(tbl,\\(x) c(moy=mean(x),var=var(x))) |> as_tibble()\n    }\n    moy_var(iris[,1:4])\n    ## # A tibble: 2 x 4\n    ##   Sepal.Length Sepal.Width Petal.Length Petal.Width\n    ##          <dbl>       <dbl>        <dbl>       <dbl>\n    ## 1        5.84        3.06          3.76       1.20 \n    ## 2        0.686       0.190         3.12       0.581\n    ```\n    :::\n\n\n\n\n\n4.  Utiliser la méthode de votre choix pour un `tibble` qui peut comporter des variables qualitatives. La fonction renverra un **warning** qui énumèrent les variables qualitatives.\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    moy_var <- function(tbl){\n      nature <- map_chr(tbl,class)\n      if (any(nature!=\"numeric\")){\n        warning(paste(\"Variable(s)\",names(tbl)[nature!=\"numeric\"],\"non continue(s)\"))\n      }\n      res <- map(tbl[,nature==\"numeric\"],\\(x) c(moy=mean(x),var=var(x))) |>\n        as_tibble()\n      return(res)\n    }\n    moy_var(iris)\n    ## Warning in moy_var(iris): Variable(s) Species non continue(s)\n    ## # A tibble: 2 x 4\n    ##   Sepal.Length Sepal.Width Petal.Length Petal.Width\n    ##          <dbl>       <dbl>        <dbl>       <dbl>\n    ## 1        5.84        3.06          3.76       1.20 \n    ## 2        0.686       0.190         3.12       0.581\n    ```\n    :::\n\n\n\n:::",
    "supporting": [
      "031-programmer_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}