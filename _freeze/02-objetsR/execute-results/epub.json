{
  "hash": "10c23c05956c888bf059a46bfbc2d8d6",
  "result": {
    "markdown": "\n::: {.content-visible when-format=\"html\"}\n::: {.cell}\n\\newcommand{\\prob}{\\mathbf P}\n\\newcommand{\\lt}{<}\n\\newcommand{\\mt}{>}\n:::\n\n```{=html}\n<style>\ndiv.correction {\n  color: black;\n  background-color: #F0F0F0;\n  font-style: normal;\n  /*display: none;*/\n}\n\n.corR {\n  font-style: italic;\n  /*display: none;*/\n}\n</style>\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\solntrue\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n# Les objets R {#sec-objetsR}\n\nOn commencera par créer un répertoire dans lequel on mettra tous les fichiers du tutoriel. On pourra créer un **projet** avec Rstudio dans lequel on placera ces fichiers (*File -\\> New Project...*). Par défaut, le répertoire de travail se situera dans le répertoire de ce projet. On peut le vérifier avec la commande\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n\n\nLa commande **setwd** permet de changer le répertoire de travail si besoin. On peut aussi le faire en utilisant le menu **Session -\\> Set Working directory -\\> Choose directory...**.\n\n## Création d'objets\n\n### Numérique\n\nOn crée un **objet R** en assignant une valeur (ou un caractère, vecteur...) avec les opérateurs `<-`, `->`, `=`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- 41.3  # assigne la valeur 41.3 à l'objet b\nx <- b     # b est assigné à x\nx = b      # b est assigné à x\nb -> x     # b est assigné à x\nis.numeric(b)\n## [1] TRUE\nmode(b)\n## [1] \"numeric\"\n```\n:::\n\n\n\n\n### Caractère\n\nLes chaines de caractères sont définies avec des guillemets : `\"chaine\"`, par exemple\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"La mort\"\ny <- \"aux trousses\"\npaste(x,y)\n## [1] \"La mort aux trousses\"\nis.character(x)\n## [1] TRUE\n```\n:::\n\n\n\n\n### Facteur\n\nL'objet facteur est très utile pour travailler avec des variables qualitatives. Cet objet permet d'identifier les modalités prisent par la variable et de travailler dessus, en changeant par exemple le nom d'une modalité :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nV1 <- factor(c(\"less20years\",\"more50years\",\"less20years\",\"more50years\",\"less20years\"))\nV1\n## [1] less20years more50years less20years more50years less20years\n## Levels: less20years more50years\nlevels(V1)\n## [1] \"less20years\" \"more50years\"\nlevels(V1) <- c(\"Young\",\"Old\")\nV1\n## [1] Young Old   Young Old   Young\n## Levels: Young Old\n```\n:::\n\n\n\n\n### Logique (Booléen)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- TRUE\nis.logical(x)\n## [1] TRUE\nmode(x)\n## [1] \"logical\"\na <- 1\na==1\n## [1] TRUE\na!=1\n## [1] FALSE\na<0\n## [1] FALSE\na>0\n## [1] TRUE\n```\n:::\n\n\n\n\n## Vecteur\n\nOn peut définir un vecteur de plusieurs façons :\n\n-   fonction collect `c`\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- c(1.2,5,9,11)\n    x\n    ## [1]  1.2  5.0  9.0 11.0\n    ```\n    :::\n\n\n\n\n-   opérateur séquence `:`\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    1:5\n    ## [1] 1 2 3 4 5\n    ```\n    :::\n\n\n\n\n-   fonction séquence `seq`\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    seq(1,10,by=2)\n    ## [1] 1 3 5 7 9\n    seq(0,1,length=10)\n    ##  [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667\n    ##  [8] 0.7777778 0.8888889 1.0000000\n    ```\n    :::\n\n\n\n\n-   fonction `rep`\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    rep(1,4)\n    ## [1] 1 1 1 1\n    rep(c(1,3),each=3)\n    ## [1] 1 1 1 3 3 3\n    ```\n    :::\n\n\n\n\nOn peut aussi créer des vecteurs **caractère** ou **logique**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"A\",\"B\",\"C\")\nx <- rep(\"A\",5)\npaste(\"X\",1:5,sep=\"-\")\n## [1] \"X-1\" \"X-2\" \"X-3\" \"X-4\" \"X-5\"\nsubstr(\"statistician\",5,9)\n## [1] \"istic\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(T,F,T)\n## [1]  TRUE FALSE  TRUE\n```\n:::\n\n\n\n\n### Sélectionner une partie d'un vecteur\n\nLa sélection s'effectue à l'aide de crochets `[ ]`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(-4,-3,1,3,5,8,0)\nx[2]\n## [1] -3\nx[c(2,5)]\n## [1] -3  5\nx>0\n## [1] FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE\nx[x>0]\n## [1] 1 3 5 8\n```\n:::\n\n\n\n\n### Opérations sur les vecteurs\n\nOn peut facilement additionner, multiplier des vecteurs :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(-10,10,by=2)\ny <- 1:length(x)\nx+y\n##  [1] -9 -6 -3  0  3  6  9 12 15 18 21\nx*y\n##  [1] -10 -16 -18 -16 -10   0  14  32  54  80 110\nz <- x>0\nx*z\n##  [1]  0  0  0  0  0  0  2  4  6  8 10\n```\n:::\n\n\n\n\n::: {#exr-exo-vecteur name=\"Manipulation de vecteurs\"}\nOn s'intéresse à des fonctions classiques permettant de manipuler des vecteurs.\n\n1.  Calculer la moyenne, la somme, la médiane et la variance du vecteur (1,3,8,9,11).\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    x <- c(1,3,8,9,11)\n    mean(x)\n    ## [1] 6.4\n    sum(x)\n    ## [1] 32\n    median(x)\n    ## [1] 8\n    var(x)\n    ## [1] 17.8\n    ```\n    :::\n\n\n\n\n2.  Créer les vecteurs suivants en utilisant la fonction **rep**.\n\n    ``` markdown\n    vec1 = 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 \n    vec2 = 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5\n    vec3 = 1 1 2 2 2 3 3 3 3 4 4 4 4 4\n    ```\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    rep(1:5,3)\n    ##  [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n    rep(1:5,each=3)\n    ##  [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5\n    rep(1:4,2:5)\n    ##  [1] 1 1 2 2 2 3 3 3 3 4 4 4 4 4\n    ```\n    :::\n\n\n\n\n3.  Créer le vecteur suivant à l'aide de la fonction **paste**, puis avec la fonction **str_c**.\n\n    ``` markdown\n    vec4 = \"A0)\" \"A1)\" \"A2)\" \"A3)\" \"A4)\" \"A5)\" \"A6)\" \"A7)\" \"A8)\" \"A9)\" \"A10)\"\n    ```\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    paste(\"A\",0:10,\")\",sep=\"\")\n    ##  [1] \"A0)\"  \"A1)\"  \"A2)\"  \"A3)\"  \"A4)\"  \"A5)\"  \"A6)\"  \"A7)\"  \"A8)\"  \"A9)\" \n    ## [11] \"A10)\"\n    #ou\n    str_c(\"A\",1:10,\")\")\n    ##  [1] \"A1)\"  \"A2)\"  \"A3)\"  \"A4)\"  \"A5)\"  \"A6)\"  \"A7)\"  \"A8)\"  \"A9)\"  \"A10)\"\n    ```\n    :::\n\n\n\n\n4.  `letters` est un vecteur qui contient les 26 lettres de l'alphabet.\n\n    a)  Trouver le numéro de la lettre $q$ (sans compter \"avec les doigts\" !). On pourra utiliser la fonction **which** ou **str_which**.\n\n\n\n\n        ::: {.cell teacher='true'}\n        \n        ```{.r .cell-code}\n        index_q <- which(letters==\"q\")\n        #ou\n        index_q <- str_which(letters,\"q\")\n        ```\n        :::\n\n\n\n\n    <!-- -->\n\n    b)  Créer le vecteur \"a1\",\"b2\",$\\dots$ jusqu'à $q$ et son index.\n\n\n\n\n        ::: {.cell teacher='true'}\n        \n        ```{.r .cell-code}\n        paste(letters[1:index_q],1:index_q,sep=\"\")\n        ##  [1] \"a1\"  \"b2\"  \"c3\"  \"d4\"  \"e5\"  \"f6\"  \"g7\"  \"h8\"  \"i9\"  \"j10\" \"k11\" \"l12\"\n        ## [13] \"m13\" \"n14\" \"o15\" \"p16\" \"q17\"\n        #ou\n        str_c(letters[1:index_q],1:index_q)\n        ##  [1] \"a1\"  \"b2\"  \"c3\"  \"d4\"  \"e5\"  \"f6\"  \"g7\"  \"h8\"  \"i9\"  \"j10\" \"k11\" \"l12\"\n        ## [13] \"m13\" \"n14\" \"o15\" \"p16\" \"q17\"\n        ```\n        :::\n\n\n\n:::\n\n## Matrices\n\nLa fonction **matrix** permet de définir des matrices.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(1:4,ncol=2)\nm\n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\nm <- matrix(1:4,nrow=2)\nm\n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\nm <- matrix(1:4,nrow=2,byrow=TRUE)\ndim(m)\n## [1] 2 2\n```\n:::\n\n\n\n\nLa position d'un élément dans une matrice est indiquée par ses numéros de ligne et de colonne. Ainsi, pour sélectionner le terme de la 2ème ligne et la 1ère colonne, on utilisera\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm[2,1]\n## [1] 3\n```\n:::\n\n\n\n\nOn peut aussi extraire des lignes et des colonnes :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm[1,] #première ligne\n## [1] 1 2\nm[,2] #deuxième colonne\n## [1] 2 4\n```\n:::\n\n\n\n\nIl n'est pas difficile de faire les calculs usuels sur les matrices :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndet(m) #déterminant\n## [1] -2\nsolve(m) #inverse\n##      [,1] [,2]\n## [1,] -2.0  1.0\n## [2,]  1.5 -0.5\nt(m) #transposé\n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\nn <- matrix(5:8,nrow=2)\nm+n\n##      [,1] [,2]\n## [1,]    6    9\n## [2,]    9   12\nm*n #attention : produit de Hadamart\n##      [,1] [,2]\n## [1,]    5   14\n## [2,]   18   32\nm%*%n #Produit matriciel\n##      [,1] [,2]\n## [1,]   17   23\n## [2,]   39   53\neigen(m) #Décomposition en valeurs propres\n## eigen() decomposition\n## $values\n## [1]  5.3722813 -0.3722813\n## \n## $vectors\n##            [,1]       [,2]\n## [1,] -0.4159736 -0.8245648\n## [2,] -0.9093767  0.5657675\n```\n:::\n\n\n\n\n## Listes\n\nUne liste est un objet hétérogène. Elle permet de stocker des objets de différents modes dans un même objet. Par exemple, on peut céer une liste qui contient un vecteur et une matrice à l'aide de\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmylist <- list(vector=rep(1:5),mat=matrix(1:8,nrow=2))\nmylist\n## $vector\n## [1] 1 2 3 4 5\n## \n## $mat\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    3    5    7\n## [2,]    2    4    6    8\nlength(mylist)\n## [1] 2\n```\n:::\n\n\n\n\nL'extraction s'effectue en indiquant la position de l'objet à extraire dans un **double crochet** `[[  ]]` :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmylist[[1]]\n## [1] 1 2 3 4 5\n```\n:::\n\n\n\n\nOn peut aussi utiliser le **nom de l'élément** à extraire :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmylist$mat\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    3    5    7\n## [2,]    2    4    6    8\nmylist[[\"mat\"]]\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    3    5    7\n## [2,]    2    4    6    8\n```\n:::\n\n\n\n\n## Dataframe\n\nLes **dataframes** sont des listes particulières dont les composantes ont la même longueur, mais potentiellement des modes différents. C'est l'objet généralement utilisé pour les **tableaux de données** (qui contiennent souvent des variables quantitatives et qualitatives). Par exemple,\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- c(\"Paul\",\"Mary\",\"Steven\",\"Charlotte\",\"Peter\")\nsex <- factor(c(\"M\",\"F\",\"M\",\"F\",\"M\"))\nsize <- c(180,165,168,170,175)\ndata <- data.frame(name,sex,size)\nsummary(data)\n##      name           sex        size      \n##  Length:5           F:2   Min.   :165.0  \n##  Class :character   M:3   1st Qu.:168.0  \n##  Mode  :character         Median :170.0  \n##                           Mean   :171.6  \n##                           3rd Qu.:175.0  \n##                           Max.   :180.0\n```\n:::\n\n\n\n\nOn observe que `name` est un vecteur de caractères, `sex` un facteur et `size` un vecteur numérique.\n\nL'extraction est similaire aux matrices et aux listes :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[2,3]\n## [1] 165\ndata[,2]\n## [1] M F M F M\n## Levels: F M\ndata$sex\n## [1] M F M F M\n## Levels: F M\n```\n:::\n\n\n\n\n## Quelques fonctions importantes\n\n-   **summary** produit un résumé d'un objet\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    summary(data)\n    ##      name           sex        size      \n    ##  Length:5           F:2   Min.   :165.0  \n    ##  Class :character   M:3   1st Qu.:168.0  \n    ##  Mode  :character         Median :170.0  \n    ##                           Mean   :171.6  \n    ##                           3rd Qu.:175.0  \n    ##                           Max.   :180.0\n    summary(1:10)\n    ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    ##    1.00    3.25    5.50    5.50    7.75   10.00\n    ```\n    :::\n\n\n\n\n-   **mean**, **sum**, **median**, **var**, **min**, **max**... (facile à comprendre)\n\n-   **sort**, **order**\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- c(1,8,5,4)\n    sort(x)\n    ## [1] 1 4 5 8\n    order(x)\n    ## [1] 1 4 3 2\n    ```\n    :::\n\n\n\n\n-   **apply** applique une fonction **f** aux lignes ou colonnes d'une matrice ou dataframe\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    V1 <- 1:10\n    V2 <- seq(-20,25,length=10)\n    df <- data.frame(V1,V2)\n    apply(df,1,mean)\n    ##  [1] -9.5 -6.5 -3.5 -0.5  2.5  5.5  8.5 11.5 14.5 17.5\n    apply(df,2,sum)\n    ## V1 V2 \n    ## 55 25\n    ```\n    :::\n\n\n\n\n## Exercices complémentaires\n\n::: {#exr-exo-matrices name=\"Manipulation de matrices\"}\nCet exercice propose des questions classiques sur la manipulation de matrices.\n\n1.  Créer la matrice suivante que l'on appellera **mat** (on pourra utiliser les fonctions `rownames` et `colnames`) :\n\n\n\n\n    ::: {.cell}\n    |      |column 1 | column 2 |column 3 | column 4 |\n    |:----:|:-------:|:--------:|:-------:|:--------:|\n    |row-1 |    1    |     5    |    5    |    0     |\n    |row-2 |    0    |     5    |    6    |    1     |\n    |row-3 |    3    |     0    |    3    |    3     |\n    |row-4 |    4    |     4    |    4    |    2     |\n    :::\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    mat <- matrix(c(1,0,3,4,5,5,0,4,5,6,3,4,0,1,3,2),ncol=4)\n    rownames(mat) <- paste(\"row-\",1:4,sep=\"\")\n    colnames(mat) <- paste(\"column \",1:4)\n    mat\n    ##       column  1 column  2 column  3 column  4\n    ## row-1         1         5         5         0\n    ## row-2         0         5         6         1\n    ## row-3         3         0         3         3\n    ## row-4         4         4         4         2\n    ```\n    :::\n\n\n\n\n2.  Créer un vecteur qui contient la diagonal de **mat**.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    diag(mat)\n    ## [1] 1 5 3 2\n    ```\n    :::\n\n\n\n\n3.  Créer une matrice qui contient les 2 premières lignes de **mat**.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    mat[1:2,]\n    ##       column  1 column  2 column  3 column  4\n    ## row-1         1         5         5         0\n    ## row-2         0         5         6         1\n    ```\n    :::\n\n\n\n\n4.  Créer une matrice qui contient les 2 dernières colonnes de **mat**.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    mat[,3:4]\n    ##       column  3 column  4\n    ## row-1         5         0\n    ## row-2         6         1\n    ## row-3         3         3\n    ## row-4         4         2\n    ```\n    :::\n\n\n\n\n5.  Calculer le déterminant et l'inverse de **mat**.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    det(mat)\n    ## [1] 60\n    solve(mat)\n    ##           row-1 row-2      row-3         row-4\n    ## column  1   0.5  -0.5  0.1666667 -1.665335e-16\n    ## column  2  -0.6   0.4 -0.4666667  5.000000e-01\n    ## column  3   0.7  -0.3  0.4333333 -5.000000e-01\n    ## column  4  -1.2   0.8 -0.2666667  5.000000e-01\n    ```\n    :::\n\n\n\n:::\n\n::: {#exr-exo-manip-iris name=\"Manipulations simples sur un jeu de données\"}\nOn considère le jeu de données **iris** disponible dans **R** :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n\n\n\n\n1.  Calculer les moyennes et variances des variables `Sepal.Width` et `Petal.Length`.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    mean(iris$Sepal.Width)\n    ## [1] 3.057333\n    mean(iris$Petal.Length)\n    ## [1] 3.758\n    var(iris$Sepal.Width)\n    ## [1] 0.1899794\n    var(iris$Petal.Length)\n    ## [1] 3.116278\n    ```\n    :::\n\n\n\n\n2.  Créer un sous jeu de données qui contient uniquement les iris de l'espèce `versicolor`. On appellera ce tableau **iris2**.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    test <- iris$Species==\"versicolor\"\n    iris2 <- iris[test,]\n    summary(iris2)\n    ##   Sepal.Length    Sepal.Width     Petal.Length   Petal.Width          Species  \n    ##  Min.   :4.900   Min.   :2.000   Min.   :3.00   Min.   :1.000   setosa    : 0  \n    ##  1st Qu.:5.600   1st Qu.:2.525   1st Qu.:4.00   1st Qu.:1.200   versicolor:50  \n    ##  Median :5.900   Median :2.800   Median :4.35   Median :1.300   virginica : 0  \n    ##  Mean   :5.936   Mean   :2.770   Mean   :4.26   Mean   :1.326                  \n    ##  3rd Qu.:6.300   3rd Qu.:3.000   3rd Qu.:4.60   3rd Qu.:1.500                  \n    ##  Max.   :7.000   Max.   :3.400   Max.   :5.10   Max.   :1.800\n    ```\n    :::\n\n\n\n\n3.  Ordonner les individus dans **iris2** par valeurs décroissantes de la variable `Sepal.Length` (on pourra utiliser la fonction **order**).\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    ord <- order(iris2$Sepal.Length,decreasing=TRUE)\n    iris3 <- iris2[ord,]\n    head(iris3)\n    ##    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n    ## 51          7.0         3.2          4.7         1.4 versicolor\n    ## 53          6.9         3.1          4.9         1.5 versicolor\n    ## 77          6.8         2.8          4.8         1.4 versicolor\n    ## 66          6.7         3.1          4.4         1.4 versicolor\n    ## 78          6.7         3.0          5.0         1.7 versicolor\n    ## 87          6.7         3.1          4.7         1.5 versicolor\n    ```\n    :::\n\n\n\n\n4.  Calculer les valeurs moyennes de `Sepal.Length` pour chaque espèce.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    mean(iris[iris$Species==\"versicolor\",\"Sepal.Length\"])\n    ## [1] 5.936\n    mean(iris[iris$Species==\"virginica\",\"Sepal.Length\"])\n    ## [1] 6.588\n    mean(iris[iris$Species==\"setosa\",\"Sepal.Length\"])\n    ## [1] 5.006\n    ```\n    :::\n\n\n\n\n5.  Ajouter une variable (qu'on appellera `sum.Petal`) dans le dataframe iris qui contiendra la somme de `Petal.Length` et `Petal.Width`.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    iris$sum.petal <- iris$Petal.Length+iris$Petal.Width\n    head(iris)\n    ##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species sum.petal\n    ## 1          5.1         3.5          1.4         0.2  setosa       1.6\n    ## 2          4.9         3.0          1.4         0.2  setosa       1.6\n    ## 3          4.7         3.2          1.3         0.2  setosa       1.5\n    ## 4          4.6         3.1          1.5         0.2  setosa       1.7\n    ## 5          5.0         3.6          1.4         0.2  setosa       1.6\n    ## 6          5.4         3.9          1.7         0.4  setosa       2.1\n    ```\n    :::\n\n\n\n:::\n\n::: {#exr-exo-fonc-apply name=\"Fonction apply\"}\nOn considère le jeu de données suivant\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lattice)\ndata(\"ethanol\")\n```\n:::\n\n\n\n\n1.  Calculer les indicateurs numériques standards (moyenne, min, max, etc.) des 3 variables du jeux de données **ethanol** (disponible dans le package *lattice*).\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    summary(ethanol)\n    ##       NOx              C                E         \n    ##  Min.   :0.370   Min.   : 7.500   Min.   :0.5350  \n    ##  1st Qu.:0.953   1st Qu.: 8.625   1st Qu.:0.7618  \n    ##  Median :1.754   Median :12.000   Median :0.9320  \n    ##  Mean   :1.957   Mean   :12.034   Mean   :0.9265  \n    ##  3rd Qu.:3.003   3rd Qu.:15.000   3rd Qu.:1.1098  \n    ##  Max.   :4.028   Max.   :18.000   Max.   :1.2320\n    apply(ethanol,2,mean)\n    ##        NOx          C          E \n    ##  1.9573750 12.0340909  0.9264773\n    ```\n    :::\n\n\n\n\n2.  Calculer les quartiles de chaque variables. On pourra faire un **apply** avec la fonction **quantile**.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    quantile(ethanol$NOx,probs=c(0.25,0.5,0.75))\n    ##    25%    50%    75% \n    ## 0.9530 1.7545 3.0030\n    quantile(ethanol$C,probs=c(0.25,0.5,0.75))\n    ##    25%    50%    75% \n    ##  8.625 12.000 15.000\n    quantile(ethanol$E,probs=c(0.25,0.5,0.75))\n    ##     25%     50%     75% \n    ## 0.76175 0.93200 1.10975\n    #ou mieux\n    apply(ethanol,2,quantile,probs=c(0.25,0.5,0.75))\n    ##        NOx      C       E\n    ## 25% 0.9530  8.625 0.76175\n    ## 50% 1.7545 12.000 0.93200\n    ## 75% 3.0030 15.000 1.10975\n    ```\n    :::\n\n\n\n\n3.  Faire de même pour les déciles.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    apply(ethanol,2,quantile,probs=seq(0.1,0.9,by=0.1))\n    ##        NOx    C      E\n    ## 10% 0.6000  7.5 0.6496\n    ## 20% 0.8030  7.5 0.7206\n    ## 30% 1.0138  9.0 0.7977\n    ## 40% 1.4146  9.0 0.8636\n    ## 50% 1.7545 12.0 0.9320\n    ## 60% 2.0994 12.6 1.0104\n    ## 70% 2.7232 15.0 1.0709\n    ## 80% 3.3326 15.0 1.1404\n    ## 90% 3.6329 18.0 1.1920\n    ```\n    :::\n\n\n\n:::\n\n::: {#exr-exo-NA-pres name=\"Données manquantes\"}\nOn considère le jeu de données **presidents**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"presidents\")\ndf <- matrix(presidents,ncol=4,byrow=T)\n```\n:::\n\n\n\n\n1.  Est-ce que la ligne 20 contient au moins une données manquante ? On pourra utiliser la fonction **any**.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    any(is.na(df[20,]))\n    ## [1] FALSE\n    ```\n    :::\n\n\n\n\n2.  Quelles sont les lignes de **df** qui contiennent au moins une donnée manquante ? On pourra utiliser la fonction **which**.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    which(apply(is.na(df),1,any))\n    ## [1]  1  4  8 28\n    ```\n    :::\n\n\n\n\n3.  Supprimer les lignes de **df** qui contiennent au moins une donnée manquante.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    ind_sup <- which(apply(is.na(df),1,any))\n    df1 <- df[-ind_sup,]\n    summary(df1)\n    ##        V1              V2              V3              V4       \n    ##  Min.   :28.00   Min.   :24.00   Min.   :24.00   Min.   :23.00  \n    ##  1st Qu.:52.50   1st Qu.:49.00   1st Qu.:46.50   1st Qu.:44.50  \n    ##  Median :64.50   Median :60.50   Median :61.00   Median :55.50  \n    ##  Mean   :60.96   Mean   :56.69   Mean   :56.27   Mean   :53.04  \n    ##  3rd Qu.:71.00   3rd Qu.:64.75   3rd Qu.:66.50   3rd Qu.:61.50  \n    ##  Max.   :80.00   Max.   :83.00   Max.   :79.00   Max.   :78.00\n    ```\n    :::\n\n\n\n\n    ::: {.corR data-latex=\"\"}\n    On aurait aussi pu utiliser directement la fonction **na.omit** :\n    :::\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    df2 <- na.omit(df)\n    all(df1==df2)\n    ## [1] TRUE\n    ```\n    :::\n\n\n\n:::\n",
    "supporting": [
      "02-objetsR_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}