{
  "hash": "4e9ca6236cac4ec59563aac6121762aa",
  "result": {
    "markdown": "\n::: {.content-visible when-format=\"html\"}\n::: {.cell}\n\\newcommand{\\prob}{\\mathbf P}\n\\newcommand{\\lt}{<}\n\\newcommand{\\mt}{>}\n:::\n\n```{=html}\n<style>\ndiv.correction {\n  color: black;\n  background-color: #F0F0F0;\n  font-style: normal;\n  /*display: none;*/\n}\n\n.corR {\n  font-style: italic;\n  /*display: none;*/\n}\n</style>\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\solntrue\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n# Applications web avec Shiny {#sec-shiny}\n\n`Shiny` est un package **R** qui permet la création simple d'applications web intéractives depuis **R**. Cette partie provient essentiellement du tutoriel de Benoît Thieurmel disponible ici : <https://github.com/datastorm-open/tuto_shiny_rennes>.\n\n## Une première application\n\nCréer un répertoire pour l'application avec **RStudio**\n\n    File -> New Project -> New Directory -> Shiny Web Application\n\nChoisir une application **Multiple File**.\n\nSi cette option n'est pas disponible (ça peut dépendre des versions de Rstudio), on pourra utiliser\n\n    File -> New File -> Shiny Web App -> Multiple File\n\nDeux fichier sont automatiquement générés : `ui.R` et `server.R`. Lancer l'application en cliquant sur le bouton `Run App`.\n\n-   Changer le titre de l'application. On pourra l'appeler **My first application**.\n-   Mettre à jour et vérifier que le titre a bien été changé.\n\n## Input - output\n\nOn garde la même application. On ne s'intéressera pas à la structure dans cette partie, on veut simplement ajouter\n\n-   des nouveaux **inputs** dans le `sidebarPanel`, après le `sliderInput`. On n'oubliera pas de séparer les inputs par des virgules;\n-   des nouveaux **outputs** dans le `mainPanel`, après le `plotOutput`. Là encore, on n'oubliera pas de séparer les outputs par des virgules.\n\nPour résumer on souhaite une colonne avec tous les inputs et une autre avec tous les outputs.\n\n1.  Ajouter dans `ui.R` une entrée qui permette de changer la couleur de l'histogramme. On pourra utiliser\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    selectInput(inputId = \"color\", label = \"Couleur :\",\n                choices = c(\"Rouge\" = \"red\", \"Vert\" = \"green\", \"Bleu\" = \"blue\"))\n    ```\n    :::\n\n\n\n\n2.  Ajouter une sortie qui permette de visualiser le **summary** du jeu de données `faithful`. On pourra utiliser\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # ui.R\n    verbatimTextOutput(\"...\")\n    \n    # server.R\n    output$... <- renderPrint({\n      summary(...)\n    })\n    ```\n    :::\n\n\n\n\n::: {#exr-exo-shiny-input-output name=\"Ajouter des inputs/outputs\"}\nAjouter des entrées/sorties à votre application pour\n\n1.  proposer à l'utilisateur de choisir un titre pour l'histogramme (utiliser `textInput` dans l'**ui** et l'option `main` dans **hist**);\n\n2.  choisir la variable de `faithful` à représenter dans l'histogramme avec un `radioButtons` ayant pour choix `colnames(faithful)`;\n\n3.  visualiser le jeu de données entier (`renderDataTable` & `dataTableOutput`);\n\n4.  ajouter un text sous l'histogramme qui indique le nombre de classes (`renderText` et `paste` dans **server**, `textOutput` dans **ui**);\n\n5.  remplacer le `selectInput` du choix de la couleur par un `colourInput` (utiliser la package [colourpicker](https://cran.r-project.org/web/packages/colourpicker/vignettes/colourpicker.html));\n\n6.  exporter le graphe (`downloadButton` & `jpeg`).\n\nL'application demandée pourra ressembler à\n\n\n\n\n::: {.cell name='input-output-app_html' screenshot.opts='{\"delay\":5,\"cliprect\":\"viewport\",\"zoom\":2,\"vwidth\":200,\"vheight\":200}'}\n::: {.cell-output-display}\n[![](07-shiny_files/figure-epub/unnamed-chunk-4-1.png){width=760 height=750}](https://input-output-rouviere-shiny.apps.math.cnrs.fr/)\n:::\n:::\n\n::: {.cell name='input-output-app_pdf'}\n\n:::\n\n\n\n\nElle est également disponible ici <https://input-output-rouviere-shiny.apps.math.cnrs.fr/>.\n:::\n\n## Structurer l'application\n\nOn considère l'application **app_structure** disponible [ici](https://lrouviere.github.io/VISU/). C'est quasiment la même que précédemment avec un `navbarPage` qui définit\n\n-   un onglet *Data* pour visualiser les données (table + summary)\n-   un onglet *Visualisation* : inputs + histogramme.\n\n::: {#exr-exo-shiny-structure1 name=\"Structurer son application\"}\nOn conserve l'application précédente.\n\n1.  Dans l'onglet **Data** utiliser `navlistPanel` pour séparer le `summary` et la table `table` en deux onglets :\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # rappel de la structure (ui.R)\n    navlistPanel(\"Title of the structure\",\n                 tabPanel(\"Title of the tab\", ..., \"(content of the tab)\"),\n                 tabPanel(\"Title of the tab\", ..., \"(content of the tab)\")\n    )\n    ```\n    :::\n\n\n\n\n2.  Dans l'onglet **Visualization** changer `sidebarLayout` - `sidebarPanel` - `mainPanel` par un `fluidRow` à 2 colonnes :\n\n    -   1/4 : pour le `sidebarPanel`\n    -   3/4 : pour le `mainPanel`.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    fluidRow(\n      column(width = 3, ...), # column 1/4 (3/12)\n      column(width = 9, ...)  # column 3/4 (9/12)\n    )\n    ```\n    :::\n\n\n\n\n    *Indication : utiliser `wellPanel` pour la colonne de gauche.*\n\n3.  Ajouter un bloxplot dans l'onglet visualisation (même variable et même couleur). On pourra également utiliser `tabsetPanel` pour avoir deux onglets pour l'histogramme et le boxplot.\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # rappel de la structure (ui.R)\n    tabsetPanel(\n      tabPanel(\"Title of the tab\", ... ,\"(content of the tab)\"),\n      tabPanel(\"Title of the tab\", ... ,\"(content of the tab)\")\n    )\n    ```\n    :::\n\n\n\n\nL'application demandée pourra ressembler à\n\n\n\n\n::: {.cell name='structure-app_html' screenshot.opts='{\"delay\":5,\"cliprect\":\"viewport\",\"zoom\":2,\"vwidth\":200,\"vheight\":200}'}\n::: {.cell-output-display}\n[![](07-shiny_files/figure-epub/unnamed-chunk-9-1.png){width=760 height=750}](https://structure-rouviere-shiny.apps.math.cnrs.fr/)\n:::\n:::\n\n::: {.cell name='structure-app_pdf'}\n\n:::\n\n\n\n\nElle est également disponible ici <https://structure-rouviere-shiny.apps.math.cnrs.fr/>.\n\n**Pour aller plus loin** : faire la même application avec [shinydashboard](https://rstudio.github.io/shinydashboard/).\n:::\n\n## Ajout de graphes interactifs\n\nDans l'application précédente, remplacer l'histogramme et la boxplot par des graphes javascript réalisés avec [rAmCharts](http://datastorm-open.github.io/introduction_ramcharts/). On pourra utiliser\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# server.R\noutput$distPlot <- renderAmCharts({...})\n\n# ui.R\namChartsOutput(\"...\")\n```\n:::\n\n\n\n\nL'application demandée pourra ressembler à\n\n\n\n\n::: {.cell name='interactif-app_html' screenshot.opts='{\"delay\":5,\"cliprect\":\"viewport\",\"zoom\":2,\"vwidth\":200,\"vheight\":200}'}\n::: {.cell-output-display}\n[![](07-shiny_files/figure-epub/unnamed-chunk-12-1.png){width=760 height=750}](https://interactifs-rouviere-shiny-2.apps.math.cnrs.fr/)\n:::\n:::\n\n::: {.cell name='interactif_pdf'}\n\n:::\n\n\n\n\nElle est également disponible ici <https://interactifs-rouviere-shiny-2.apps.math.cnrs.fr/>.\n\n\n::: {#exr-exo-shiny-ozone name=\"Modèles linéaires pour l'ozone\"}\nOn considère les données `ozone.txt` où le problème est d'expliquer la variable continue `maxO3` par les autres variables du jeu de données. On propose de construire une application avec 3 onglets en utilisant (dans le **ui.R**) la structure suivante :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnavbarPage(\n  title=\"Titre de l'appli\",\n  tabPanel(\n    title=\"Titre de l'onglet\",\n    ...\n  )\n)\n```\n:::\n\n\n\n\n1.    Créer le fichier `global.R` où on chargera les packages nécessaires et où on lira le jeu de données.\n\n2.    Construire le premier onglet où on visualisera :\n\n      -   sur une ligne le jeu de données de façon dynamique : on pourra utiliser la fonction `dataTableOutput` dans le **ui.R** et la fonction `renderDataTable` dans le **server.R**.\n    \n      -   sur une autre ligne l'histogramme de la variable à expliquer et la matrice des corrélations des variables explicatives quatitatives. On pourra utiliser les commandes suivantes pour la matrice des corrélations :\n    \n\n\n\n          ::: {.cell}\n          \n          ```{.r .cell-code}\n          corrplot::corrplot(cor(ozone[,2:11]))\n          ```\n          :::\n\n\n\n    \n          D'un point de vue structure on pourra utiliser la fonction `fluidrow` pour intégrer les deux graphes.\n\n3.    Ajouter un second onglet qui permettra de visualiser un modèle à une variable explicative que l'utilisateur choisira. On pourra utiliser `radioButtons` dans le **ui.R** pour choisir la variable et les commandes suivantes dans le **server.R**\n\n\n\n\n      ::: {.cell}\n      \n      ```{.r .cell-code}\n      renderDataTable({\n        XX <- paste(input$...,collapse=\"+\")\n        form <- paste(\"maxO3~\",XX,sep=\"\") |> formula()\n        mod <- lm(form,data=ozone)\n        mod_sum1 <- summary(mod)$coefficients |> round(3) |> as_tibble()\n        mod_sum1\n      })\n      ```\n      :::\n\n\n\n\n      On pourra également visualiser le nuage de points et la droite de régression pour le modèle choisi par l'utilisateur.\n    \n4.    Ajouter un troisième onglet où l'utilisateur pourra visualiser les estimateurs d'un modèle de régression multiple où il choisira les variables explicatives (avec `checkboxGroupInput` par exemple). On pourra éventuellement ajouter un graphe pour visualiser les résidus.\n\n5.    Choisir un thème pour votre application en vous référant à la page suivante : <https://rstudio.github.io/shinythemes/>.\n\n\nL'application demandée pourra ressembler à\n\n\n\n\n::: {.cell name='ozone-app_html' screenshot.opts='{\"delay\":5,\"cliprect\":\"viewport\",\"zoom\":2,\"vwidth\":200,\"vheight\":200}'}\n::: {.cell-output-display}\n[![](07-shiny_files/figure-epub/unnamed-chunk-17-1.png){width=760 height=750}](https://ozone-rouviere-shiny-4.apps.math.cnrs.fr/)\n:::\n:::\n\n::: {.cell name='ozone_pdf'}\n\n:::\n\n\n\n\nElle est également disponible ici : <https://ozone-rouviere-shiny-4.apps.math.cnrs.fr/>.\n\n:::\n\n## Reactive, isolation, observe, html, ...\n\nGarder la même application et\n\n-   ajouter un `actionButton` combiné à un `isolate` pour mettre à jour l'application uniquement lorsque l'utilisateur clique sur le bouton.\n\n-   Utiliser `observeEvent` pour forcer l'apparition de l'histogramme lorsqu'on met à jour l'application. On pourra utiliser\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # think to add  \"session\" \n    shinyServer(function(input, output, session))\n    \n    # an id \n    tabsetPanel(id = \"viz\",\n                tabPanel(\"Histogram\",...,))\n      \n    # and finaly\n    observeEvent(input$go, {\n      updateTabsetPanel(session, inputId = \"viz\",\n                        selected = \"Histogram\")})\n    \n      \n    ```\n    :::\n\n\n\n\n-   Utiliser `reactive` pour stocker la variable sélectionnée\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Example of reactive\n    data <- reactive({\n      ...\n    })\n    \n    output$plot <- renderPlot({\n      x <- data()\n      ...\n    })\n    ```\n    :::\n\n\n\n\n-   Ajouter un titre en bleu sur le jeu de données. On pourra utiliser `h1`\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    h1(\"Dataset\", style = \"color : #0099ff;text-align:center\")\n    ```\n    :::\n\n\n\n\n-   Ajouter un troisième onglet pour présenter un résumé de votre Uinersité, avec un logo de l'institution et un lien vers son site web.\n\n-   **Pour aller plus loin** : changer le thème de l'application avec un fichier de style `.css`. On pourra par exemple utiliser bootswatch <http://bootswatch.com/3>.\n\nL'application finale pourra ressembler à\n\n\n\n\n::: {.cell name='plus-loin-app_html' screenshot.opts='{\"delay\":5,\"cliprect\":\"viewport\",\"zoom\":2,\"vwidth\":200,\"vheight\":200}'}\n::: {.cell-output-display}\n[![](07-shiny_files/figure-epub/unnamed-chunk-22-1.png){width=760 height=750}](https://plus-loin-rouviere-shiny-2.apps.math.cnrs.fr/)\n:::\n:::\n\n::: {.cell name='plus-loin-app_pdf'}\n\n:::\n\n\n\n\nElle est également disponible ici <https://plus-loin-rouviere-shiny-2.apps.math.cnrs.fr/>.\n\n## Exercices complémentaires\n\n::: {#exr-shiny-desc-app name=\"Une application simple descriptive\"}\nOn considère le jeu de données *SAheart* du package **bestglm**.\n\n1.  A l'aide du package **rAmCharts**, représenter les histogrammes des variables quantitatives du jeu de données ainsi que les boxplots de ces variables en fonction de la variable **chd**.\n\n\n\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    library(bestglm)\n    library(rAmCharts)\n    amHist(SAheart$adiposity,freq=FALSE,xlab=\"adiposity\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](07-shiny_files/figure-epub/unnamed-chunk-24-1.png)\n    :::\n    :::\n\n    ::: {.cell teacher='true'}\n    \n    ```{.r .cell-code}\n    amBoxplot(adiposity~chd,data=SAheart)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](07-shiny_files/figure-epub/unnamed-chunk-25-1.png)\n    :::\n    :::\n\n\n\n\n2.  Créer une application shiny avec [shinydashboard](https://rstudio.github.io/shinydashboard/index.html) qui permette de\n\n    -   choisir une variable parmi les variables quantitatives du jeu de données. On pourra utiliser **radioButtons** avec l'argument\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    choices=names(SAheart)[sapply(SAheart,class)==\"numeric\"]\n    ```\n    :::\n\n\n\n\n    -   visualiser l'histogramme, puis le boxplot en fonction de *chd* de la variable sélectionnée. Ces graphiques devront être faits avec **rAmCharts**. On pourra utiliser **amChartsOutput**. L'application demandée pourra ressembler à\n\n\n\n\n    ::: {.cell name='desc-app_html' screenshot.opts='{\"delay\":5,\"cliprect\":\"viewport\",\"zoom\":2,\"vwidth\":200,\"vheight\":200}'}\n    ::: {.cell-output-display}\n    [![](07-shiny_files/figure-epub/unnamed-chunk-27-1.png){width=760 height=750}](https://lrouviere.shinyapps.io/DESC_APP/)\n    :::\n    :::\n\n    ::: {.cell name='desc-app_pdf'}\n    \n    :::\n\n\n\n\n    Elle est disponible ici <https://lrouviere.shinyapps.io/DESC_APP>.\n:::\n\n::: {#exr-shiny-velib-app name=\"Stations velib à Rennes\"}\nRéaliser une application qui permette de visualiser les stations velib à Rennes. Elle pourra être du même genre que celle-ci :\n\n\n\n\n::: {.cell name='velib-app_html' screenshot.opts='{\"delay\":5,\"cliprect\":\"viewport\",\"zoom\":2,\"vwidth\":200,\"vheight\":200}'}\n::: {.cell-output-display}\n[![](07-shiny_files/figure-epub/unnamed-chunk-29-1.png){width=760 height=750}](https://lrouviere.shinyapps.io/velib/)\n:::\n:::\n\n::: {.cell name='velib-app_pdf'}\n\n:::\n\n\n\n\nOn peut avoir une meilleure vision ici : <https://lrouviere.shinyapps.io/velib/>. On récupérera les données sur le site de Rennes métropole : <https://data.rennesmetropole.fr/explore/dataset/etat-des-stations-le-velo-star-en-temps-reel/export/>\n:::\n",
    "supporting": [
      "07-shiny_files/figure-epub"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}