map(tbl,\(x) list(moy=mean(x),var=var(x)))
map(tbl,\(x) list(moy=mean(x),var=var(x))) |> as_tibble()
a<- map(tbl,\(x) list(moy=mean(x),var=var(x))) |> as_tibble()
a[1,1]
a[1,1]+1
as.vector(a[1,1])
map(tbl,\(x) c(moy=mean(x),var=var(x)))
map(tbl,\(x) c(moy=mean(x),var=var(x))) |> unlist()
map(tbl,\(x) c(moy=mean(x),var=var(x))) |> as_tibble()
help("as_tibble")
moy_var <- function(tbl){
map(tbl,\(x) c(moy=mean(x),var=var(x))) |> as_tibble()
return(list(moy=moyenne,var=variance))
}
moy_var(iris[,1:4])
moy_var <- function(tbl){
map(tbl,\(x) c(moy=mean(x),var=var(x))) |> as_tibble()
}
moy_var(iris[,1:4])
tbl <- iris
nature <- map_chr(tbl,class)
nature
nature <- map_chr(tbl,str)
str(tbl)
str(tbl) |> names()
glimpse(tbl)
glimpse(tbl) |> names()
any(nature!=numeric)
nature <- map_chr(tbl,class)
any(nature!=numeric)
any(nature!="numeric")
moy_var <- function(tbl){
nature <- map_chr(tbl,class)
if (any(nature!="numeric")){
warning(paste("Variable(s)",names(tbl)[nature!="numeric"],"non continue(s)"))
}
res <- map(tbl[,nature=="numeric"],\(x) c(moy=mean(x),var=var(x))) |>
as_tibble()
return(res)
}
moy_var(iris)
set.seed(1234)
tbl <- tibble(X1=sample(10,5),X2=sample(10,5))
tbl[3,1] <- NA;tbl[4,2] <- NA
tbl
map(tbl,\(x) x[is.na(x)] <- mean(x))
map(tbl,\(x) x[is.na(x)] <- mean(x,na.rm = TRUE))
tbl
apply(tbl,2,mean,na.rm=TRUE)
set.seed(123)
tbl <- tibble(X1=sample(10,5),X2=sample(10,5))
tbl[3,1] <- NA;tbl[4,2] <- NA
tbl
map(tbl,\(x) x[is.na(x)] <- mean(x,na.rm = TRUE))
tbl <- tibble
imputation <- function(tbl,choix="moyenne"){
map(tbl,\(x) {x[is.na(x)] <- mean(x,na.rm = TRUE)})
}
map(tbl,\(x) {x[is.na(x)] <- mean(x,na.rm = TRUE)})
help(replace)
map(tbl,\(x) replace(x,is.na(x),mean(x,na.rm = TRUE)))
map(tbl,\(x) replace(x,1,mean(x,na.rm = TRUE)))
map(tbl,\(x) replace_na(x,mean(x,na.rm = TRUE)))
map_dfc(tbl,\(x) replace_na(x,mean(x,na.rm = TRUE)))
help(replace_na)
map_dfc(tbl,\(x) replace_na(mean(x,na.rm = TRUE)))
map(tbl,\(x) replace_na(mean(x,na.rm = TRUE)))
map(tbl,\(x) mean(x,na.rm = TRUE))
tbl()
tbl
set.seed(123)
tbl <- tibble(X1=sample(10,5),X2=sample(10,5))
tbl[3,1] <- NA;tbl[4,2] <- NA
tbl
map(tbl,\(x) mean(x,na.rm = TRUE))
map(tbl,\(x) replace_na(mean(x,na.rm = TRUE)))
map_df(tbl,\(x) replace_na(mean(x,na.rm = TRUE)))
help(do.call)
help(map_df)
df <- tibble(x = c(1, 2, NA), y = c("a", NA, "b"))
df %>% replace_na(list(x = 0, y = "unknown"))
df$x %>% replace_na(0)
help("na.action")
map(tbl,\(x) x[is.na(x)] <- replace_na(mean(x,na.rm = TRUE)))
map(tbl,\(x) x[is.na(x)])
aa <- map(tbl,\(x) x[is.na(x)] <- replace_na(mean(x,na.rm = TRUE)))
aa
tbl |> replace_na(2)
tbl |> replace_na(list(2))
help(replace_na)
tbl |> replace_na(list(c(1,2)))
tbl |> replace_na(X1=list(c(1,2)))
tbl |> replace_na(X1=list(c(1)))
tbl |> replace_na(list(X1=c(1)))
map(tbl,\(x) mean(x,na.rm = TRUE))
tbl |> replace_na(list(X1=c(1)))
tbl |> replace_na(moy)
moy <- map(tbl,\(x) mean(x,na.rm = TRUE))
tbl |> replace_na(moy)
moy
tbl |> replace_na(moy[[1]])
class(moy)
tbl |> replace_na(moy[1])
moy[1]
i<-1
tbl[is.na(tbl[,]),i] <- mo[i]
tbl[is.na(tbl[,]),i] <- moy[i]
tbl[is.na(tbl[,]),i]
tbl[is.na(tbl[,i]),i]
med <- map(tbl,\(x) median(x,na.rm = TRUE))
imputation <- function(tbl,choix="moyenne"){
if (choix=="moyenne"){
moy <- map(tbl,\(x) mean(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- moy[i]
}
} else {
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
}
return(tbl)
}
imputation(tbl)
i
tbl
med <- map(tbl,\(x) median(x,na.rm = TRUE))
tbl[is.na(tbl[,i]),i] <- moy[i]
i
moy[i]
imputation <- function(tbl,choix="moyenne"){
if (choix=="moyenne"){
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- moy[i]
}
} else {
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
}
return(tbl)
}
imputation(tbl)
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE))
tbl[is.na(tbl[,i]),i] <- moy[i]
tbl[is.na(tbl[,i]),i]
tbl[is.na(tbl[,i]),i] <- moy[i]
moy
moy[1]
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
tbl[1,2] <- 3
tbl[1,2] <- moy[i]
tbl[1,2] <- as.numeric(moy[i])
class(moy)
class(moy[i])
tbl[1,2] <- as.numeric(moy[i])
tbl[1,2] <- moy
tbl[1,2] <- moy[1,1]
tbl[1,2] <- moy[1]
tbl[1,2] <- moy[2]
tbl[is.na(tbl[,i]),i] <- moy[i]
i
i<-2
tbl[is.na(tbl[,i]),i] <- moy[i]
imputation <- function(tbl,choix="moyenne"){
if (choix=="moyenne"){
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- moy[i]
}
} else {
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
}
return(tbl)
}
imputation(tbl)
set.seed(123)
tbl <- tibble(X1=sample(10,5),X2=sample(10,5))
tbl[3,1] <- NA;tbl[4,2] <- NA
tbl
imputation <- function(tbl,choix="moyenne"){
if (choix=="moyenne"){
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- moy[i]
}
} else {
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
}
return(tbl)
}
imputation(tbl)
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE))
i<-1
tbl[is.na(tbl[,i]),i] <- moy[i]
moy[i]
as.numeric(moy[i])
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
moy <- c(1,2)
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
i<-2
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
set.seed(123)
tbl <- tibble(X1=sample(10,5),X2=sample(10,5))
tbl[3,1] <- NA;tbl[4,2] <- NA
tbl
imputation <- function(tbl,choix="moyenne"){
if (choix=="moyenne"){
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE)) |> unlist()
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
}
} else {
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
}
return(tbl)
}
imputation(tbl)
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE)) |> unlist()
moy
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE)) |> as.numeric()
moy
imputation <- function(tbl,choix="moyenne"){
if (choix=="moyenne"){
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE)) |> as.numeric()
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
}
} else {
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
}
return(tbl)
}
imputation(tbl)
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE)) |> as.numeric()
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
i
i<-1
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
tbl
moy[i]
moy
imputation(tbl,choix="mediane")
set.seed(123)
tbl <- tibble(X1=sample(10,5),X2=sample(10,5))
tbl[3,1] <- NA;tbl[4,2] <- NA
tbl
imputation <- function(tbl,choix="moyenne"){
if (choix=="moyenne"){
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE)) |> as.numeric()
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
}
} else {
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE))
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
}
return(tbl)
}
imputation(tbl,choix="mediane")
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE)) \as.numeric()
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE)) |> as.numeric()
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
i
med
tbl
set.seed(123)
tbl <- tibble(X1=rnorm(10,5),X2=rnorm(10,5))
tbl[3,1] <- NA;tbl[4,2] <- NA
tbl
imputation <- function(tbl,choix="moyenne"){
if (choix=="moyenne"){
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE)) |> as.numeric()
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
}
} else {
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE)) |> as.numeric()
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
}
return(tbl)
}
imputation(tbl,choix="mediane")
str(tbl)
str(tbl)[2]
str(tbl)[[2]]
set.seed(123)
tbl <- tibble(X1=as.numeric(sample(10,5)),X2=as.numeric(sample(10,5)))
tbl[3,1] <- NA;tbl[4,2] <- NA
tbl
imputation <- function(tbl,choix="moyenne"){
if (choix=="moyenne"){
moy <- map_dbl(tbl,\(x) mean(x,na.rm = TRUE)) |> as.numeric()
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- as.numeric(moy[i])
}
} else {
med <- map_dbl(tbl,\(x) median(x,na.rm = TRUE)) |> as.numeric()
for (i in 1:ncol(tbl)){
tbl[is.na(tbl[,i]),i] <- med[i]
}
}
return(tbl)
}
imputation(tbl,choix="mediane")
factorielle(2.5)
factorielle <- function(n){
return(prod(1:n))
}
factorielle(2.5)
factorielle(-2)
factorielle <- function(n){
if (n<=0) stop("l'entier doit Ãªtre strictement positif")
if (ceiling(n)!=n) warning(paste("arrondi de",n,"en",ceiling(n)))
return(prod(1:ceiling(n)))
}
factorielle(-2)
factorielle(pi)
factorielle(2.8)
ceiling(2.3)
help(map2)
apply(iris[,-5],2,mean)
map(iris[,-5],mean)
map_dbl(iris[,-5],mean)
help(map_dbl)
list(1:3)
l1 <- list(1,2,3)
l2 <- list(4,5,6)
map2(l1,l2,`+`)
map2_dbl(l1,l2,`+`)
tbl <- tibble(age=runif(5,20,50),taille=runif(5,150,180))
tbl2 <- tibble(age=runif(5,20,50),taille=runif(5,150,180))
map2_dfc(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
map2_dbl(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
map2_dfc(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
map2_dbl(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
help("map2_dfc")
map2_dbl(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2))) |> list_rbind()
x2 <- list(
a = data.frame(x = 1:2),
b = data.frame(y = "a")
)
x2
list_rbind(x2)
map2_dbl(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2))) |> list_c()
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2))) |> list_rbind()
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2))) |> list_cbind()
list_cbind(x2)
x2
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
list_rbind(x2, names_to = "id")
x1 <- list(a = 1, b = 2, c = 3)
list_c(x1)
x1
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2))) %>% list_cbind()
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2))) %>% list_c()
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2))) %>% list_rbind()
map2_dfc(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2))) %>% list_rbind()
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
x2
map2(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2))) |> as_tibble()
map2_dfc(tbl,tbl2,function(d1,d2) mean(rbind(d1,d2)))
tbl1 <- tibble(age=runif(5,20,50),taille=runif(5,150,180))
tbl2 <- tibble(age=runif(5,20,50),taille=runif(5,150,180))
map2(tbl1,tbl2,function(d1,d2) mean(rbind(d1,d2))) |> as_tibble()
set.seed(123)
tbl1 <- tibble(age=runif(5,20,50),taille=runif(5,150,180))
tbl2 <- tibble(age=runif(5,20,50),taille=runif(5,150,180))
map2(tbl1,tbl2,function(d1,d2) mean(rbind(d1,d2))) |> as_tibble()
map2_dbl(tbl1,tbl2,function(d1,d2) mean(rbind(d1,d2)))
map2_dbl(tbl1,tbl2,~mean(rbind(d1,d2)))
map2_dbl(tbl1,tbl2,~mean(rbind(.x,.y)))
map2_dbl(tbl1,tbl2,\(d1,d2) mean(rbind(d1,d2)))
tbl1 %>% .[1,1]
tbl1 |> .[1,1]
c(0.25,0.5) |> quantile(rnorm(50),probs = .)
c(0.25,0.5) %>% quantile(rnorm(50),probs = .)
c(0.25,0.5,0.75) |> \(p) quantile(100,probs = p)
c(0.25,0.5,0.75) |> (\(p) quantile(100,probs = p))
c(0.25,0.5,0.75) |> {\(p) quantile(100,probs = p)}
c(0.25,0.5,0.75) |> (\(p) quantile(100,probs = p))()
set.seed(123)
X1 <- rnorm(100)
c(0.25,0.5,0.75) %>% quantile(100,probs = .)
c(0.25,0.5,0.75) |> quantile(100,probs = .)
c(0.25,0.5,0.75) |> (\(p) quantile(X1,probs = p))()
c(0.25,0.5,0.75) %>% quantile(100,probs = .)
c(0.25,0.5,0.75) %>% quantile(X1,probs = .)
c(0.25,0.5,0.75) |> quantile(X1,probs = .)
c(0.25,0.5,0.75) |> quantile(X1,probs = .probs)
c(0.25,0.5,0.75) |> ~quantile(X1,probs = .probs)
c(0.25,0.5,0.75) |> {~quantile(X1,probs = .probs)}
c(0.25,0.5,0.75) |> {~quantile(X1,.probs)}
c(0.25,0.5,0.75) |> ~quantile(X1,.probs)
c(0.25,0.5,0.75) |> (\(p) quantile(X1,probs = p))()
url <- paste0(
"https://data.rennesmetropole.fr/api/records/1.0/search/",
"?dataset=etat-des-stations-le-velo-star-en-temps-reel",
"&rows=100",
"&facet=nom",
"&facet=etat",
"&facet=nombreemplacementsactuels",
"&facet=nombreemplacementsdisponibles",
"&facet=nombrevelosdisponibles",
"&facet=coordonnees"
)
ll <- jsonlite::fromJSON(url)
etat <- ll$records$fields
etat
help("read_csv2")
library(tidyverse)
toto <- read_csv2("data/mydata.csv")
toto
toto <- read_csv2("data/mydata.csv",locale = locale(decimal_mark = "."))
toto
toto <- read_delim("data/mydata.csv",locale = locale(decimal_mark = "."))
toto
view(toto)
help(fct_recode)
help("recode_factor")
help(fct_recode)
donnees1 <- tibble(X=seq(-2*pi,2*pi,by=0.001),
cos=cos(X))
donnees1
donnees2 <- tibble(X=seq(-2*pi,2*pi,by=0.001),
sin=sin(X))
ggplot(donnees1)+geom_line(aes(x=X,y=cos))+
geom_line(data=donnees2,aes(x=X,y=sin),color="red")
donnees <- tibble(X=seq(-2*pi,2*pi,by=0.001),
cos=cos(X),sin=sin(X))
ggplot(donnees)+aes(x=X,y=cos)+geom_line()+
geom_line(aes(y=sin),color="red")
#ou pour la lÃ©gende
ggplot(donnees)+aes(x=X,y=cos)+geom_line(aes(color="cos"))+
geom_line(aes(y=sin,color="sin"))+labs(color="Fonction")
df1 <- df |> pivot_longer(cols=c(cos,sin),
names_to = "Fonction",
values_to = "value")
#ou
df1 <- donnees1 |>
pivot_longer(cols=-X,
names_to = "Fonction",
values_to = "value")
ggplot(df1)+aes(x=X,y=value,color=Fonction)+geom_line()
1
#ou
df1 <- donnees |>
pivot_longer(cols=-X,
names_to = "Fonction",
values_to = "value")
ggplot(df1)+aes(x=X,y=value,color=Fonction)+geom_line()
ggplot(df1)+aes(x=X,y=value)+geom_line()+facet_wrap(~Fonction)
library(gridExtra)
p1 <- ggplot(donnees1)+aes(x=X,y=Y1)+geom_line()
p2 <- ggplot(donnees2)+aes(x=X,y=Y2)+geom_line()
grid.arrange(p1,p2,nrow=1)
p1 <- ggplot(donnees1)+aes(x=X,y=cos)+geom_line()
p2 <- ggplot(donnees2)+aes(x=X,y=sin)+geom_line()
grid.arrange(p1,p2,nrow=1)
install.packages("hflights")
library(leaflet)
leaflet() |> addTiles()
leaflet() |> addTiles()
library(htmlwidgets)
library(knitr)
remove.packages("knitr")
install_version("knitr", version = "1.42", repos = "http://cran.us.r-project.org")
require(devtools)
install.packages("devtools")
library(knitr)
remove.packages("knitr")
install_version("knitr", version = "1.42", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("knitr", version = "1.42", repos = "http://cran.us.r-project.org")
install_version("knitr", version = "1.42", repos = "http://cran.us.r-project.org")
install.packages("knitr")
install_version("knitr", version = "1.42.1", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("knitr", version = "1.42.1", repos = "http://cran.us.r-project.org")
install_version("knitr", version = "1.43", repos = "http://cran.us.r-project.org")
library(knitr)
detach("package:knitr", unload = TRUE)
remove.packages("knitr")
install.packages("~/Downloads/knitr_1.42.tar", repos = NULL)
install.packages("~/Downloads/knitr_1.42.tar")
install_version("knitr", version = "1.42", repos = "https://cran.r-project.org/src/contrib/Archive/knitr/")
install_version("knitr", version = "1.42", repos = "https://cran.r-project.org/src/contrib/Archive/")
install_version("knitr", version = "1.42", repos = "http://cran.us.r-project.org")
library(knitr)
